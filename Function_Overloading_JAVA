==> Function/Method overloading is also known as Compile-time Polymorphism, Static Polymorphism, or Early binding in Java

==> When we have multiple functions with the same name but different parameters/arguments , then they are said to be overloaded. This technique is used to enhance the readability of the program.
++> Example 1
class Student{
  String name;
  int age;
  public void PrintInfo(String name){
    System.out.println(name);
    
  }
  public void PrintInfo(int age){
    System.out.println(age);
    
  }
  public void PrintInfo(String name , int age){
    System.out.println(name + " " +age);
    
  }
  
}
class Main {
  public static void main(String[] args) {
    Student s1=new Student();
    s1.name="Rakesh Singh";
    s1.age=24;
    Student s2=new Student();
    s2.name="Shreya Singh";
    s2.age=24;

    s1.PrintInfo(s1.name  , s1.age);
    s1.PrintInfo(s1.name);
    s1.PrintInfo(s1.age);

     s1.PrintInfo(s2.name  ,   s2.age);
    s1.PrintInfo(s2.name);
    s1.PrintInfo(s2.age);

    
    
  }
}

* * * *   **     Output   **  * * * * 
Rakesh Singh 24
Rakesh Singh
24
Shreya Singh 24
Shreya Singh
24

Example 2
class Sum{
  int x , y , z;

  public int sum(int x , int y){
    return (x+y);
  }
  public int sum( int x , int y ,int z){
    return (x+y+z);
  }

  public double sum(double x , double y){
    return x+y;
  }
  
  
}
class Main{
  public static void main(String args[]){
    Sum s1=new Sum();
    System.out.println(s1.sum(10,20));
    System.out.println(s1.sum(10,20 ,30));
    System.out.println(s1.sum(10.5,20.9 ));
    
  }
}

* * * * * * * ** ** *  ** * * * *  ** * * ** **  ** Output * * * * *  * * * ** * *  ** * * ** * * * * 
30
60
31.4


 # # # # # # # # # # # # # # # #  #   #    #    #   Different Ways of Method Overloading in Java #  #   #    #    # # # # # # # # # # # # # # # # # 
==>    Changing the Number of Parameters.
==>    Changing Data Types of the Arguments.
==>    Changing the Order of the Parameters of Methods

---------------------------------------------------------Changing the Number of Parameters -----------------------------------------------------------------------------------------------
<==  Example 3  ==>

class Product{
    int a;
    int b;
    int c;

    public int multiply(int a , int b){
      int product = a * b;
      return product;
    }

    public int multiply(int a , int b , int c){
      int product = a * b * c;
      return product ;
    }

  
  
}
class Main{
  public static void main(String args[]){
  Product p1 = new Product();

    int Product =p1.multiply(3 ,5);

     System.out.println("Product of the two integer value :" + Product);

    Product = p1.multiply(12 , 5 , 4);

    System.out.println("Product of the three integer value :" + Product);

    
    
    
 
    
  }
}

* * * * *  *  Output  * * * * * * 

Product of the two integer value :15
Product of the three integer value :240
