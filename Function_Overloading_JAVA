==> Function/Method overloading is also known as Compile-time Polymorphism, Static Polymorphism, or Early binding in Java

==> When we have multiple functions with the same name but different parameters/arguments , then they are said to be overloaded. This technique is used to enhance the readability of the program.
++> Example 1
class Student{
  String name;
  int age;
  public void PrintInfo(String name){
    System.out.println(name);
    
  }
  public void PrintInfo(int age){
    System.out.println(age);
    
  }
  public void PrintInfo(String name , int age){
    System.out.println(name + " " +age);
    
  }
  
}
class Main {
  public static void main(String[] args) {
    Student s1=new Student();
    s1.name="Rakesh Singh";
    s1.age=24;
    Student s2=new Student();
    s2.name="Shreya Singh";
    s2.age=24;

    s1.PrintInfo(s1.name  , s1.age);
    s1.PrintInfo(s1.name);
    s1.PrintInfo(s1.age);

     s1.PrintInfo(s2.name  ,   s2.age);
    s1.PrintInfo(s2.name);
    s1.PrintInfo(s2.age);

    
    
  }
}

* * * *   **     Output   **  * * * * 
Rakesh Singh 24
Rakesh Singh
24
Shreya Singh 24
Shreya Singh
24

Example 2
class Sum{
  int x , y , z;

  public int sum(int x , int y){
    return (x+y);
  }
  public int sum( int x , int y ,int z){
    return (x+y+z);
  }

  public double sum(double x , double y){
    return x+y;
  }
  
  
}
class Main{
  public static void main(String args[]){
    Sum s1=new Sum();
    System.out.println(s1.sum(10,20));
    System.out.println(s1.sum(10,20 ,30));
    System.out.println(s1.sum(10.5,20.9 ));
    
  }
}

* * * * * * * ** ** *  ** * * * *  ** * * ** **  ** Output * * * * *  * * * ** * *  ** * * ** * * * * 
30
60
31.4


 # # # # # # # # # # # # # # # #  #   #    #    #   Different Ways of Method Overloading in Java #  #   #    #    # # # # # # # # # # # # # # # # # 
==>    Changing the Number of Parameters.
==>    Changing Data Types of the Arguments.
==>    Changing the Order of the Parameters of Methods

---------------------------------------------------------Changing the Number of Parameters -----------------------------------------------------------------------------------------------
<==  Example 3  ==>

class Product{
    int a;
    int b;
    int c;

    public int multiply(int a , int b){   //Method 1 - Multiplying two integer value
      int product = a * b;
      return product;
    }

    public int multiply(int a , int b , int c){  //Method 2 - Multiplying three integer value
      int product = a * b * c;
      return product ;
    }

  
  
}
class Main{
  public static void main(String args[]){
  Product p1 = new Product();

    int Product =p1.multiply(3 ,5);  //Calling method to multiply two numbers

     System.out.println("Product of the two integer value :" + Product);

    Product = p1.multiply(12 , 5 , 4); ////Calling method to multiply three numbers

    System.out.println("Product of the three integer value :" + Product);

    
    
    
 
    
  }
}

* * * * *  *  Output  * * * * * * 

Product of the two integer value :15
Product of the three integer value :240

 _  - - - - - --- - - - - - - - - - - - - -Example 4 - - - - - - - - - - - - - - - - - - - -- - - - - - - -- - - - -- - - -- - - -- - - - - -
 2. Changing Data Types of the Arguments
 
In many cases, methods can be considered Overloaded if they have the same name but have different parameter types, methods are considered to be overloaded.

import java.io.*;
class Product{
  public int product(int x , int y , int z){
    int prod1 = x * y;
    return prod1;
  }
  public double product(double x , double y , double z){
    double prod2 = x * y * z;
    return prod2;
  }
  
}
class Main{
  public static void main(String args[]){
    Product P1 = new Product();
    
    int prod1 =P1.product(21,10 ,5);
    System.out.println("Product of two integer value : " +prod1);

    
    double prod2 =P1.product(3.4 , 10.3 , 11.5);
    System.out.println("Product of three integer value : " +prod2);
    
    
  }
}

* * * * * * * * * **   Output    ** * * * ** ** * * ** * ** 


Product of two integer value : 210
Product of three integer value : 402.73
* * ** * * * * * * * ** * * * * * * * * * * * * * *  * * *  * *     3. Changing the Order of the Parameters of Methods     * * * * * * * * * * * * * * * * * * * * * * 

==>   Method overloading can also be implemented by rearranging the parameters of two or more overloaded methods. 
==>   For example, if the parameters of method 1 are (String name, int roll_no) and  the other method is (int roll_no, String name) but both have the same name, 
      then these 2 methods are considered to be overloaded with different sequences of parameters.
      
 import java.io.*;
class Student{
  String name;
  int roll;
  public void Student_Id(String name , int roll){
    System.out.println("Name :" + name +  "  "  +"Roll No :" + roll);
    
  }

  
  public void Student_Id(int roll , String name){
    System.out.println("Roll no:" + roll + "  " + "Name :" + name);
    
  }
  
}
class Main{
  public static void main(String args[]){
    Student S1=new Student();
    S1.Student_Id("Shreya" , 1);
    S1.Student_Id(2 , "RAkesh");
    
    
    
  }
}

* * * * * * *   Output  * * * * * * * *  *
Name :Shreya  Roll No :1
Roll no:2  Name :RAkesh

